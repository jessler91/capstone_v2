{"version":3,"sources":["components/hp-scroll.mp4","components/NavBar.js","components/HPVideo.js","components/Homepage.js","components/About.js","components/Login.js","components/Dashboard.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TopNavBar","AppBar","position","color","Toolbar","IconButton","Typography","variant","style","flexGrow","className","to","HPVideo","source","src","hpscroll","width","height","type","controls","autoPlay","muted","loop","Component","Homepage","Container","maxWidth","textAlign","Divider","About","state","checked","heading","this","Login","props","onSubmit","e","preventdefault","console","log","login","TextField","required","placeholder","name","Button","Dashboard","Router","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,uC,yMCsC5BC,G,MA/BG,WACd,OAGI,kBAACC,EAAA,EAAD,CAAQC,SAAS,WAAUC,MAAM,aAC7B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYF,MAAM,WACd,kBAAC,IAAD,OAEJ,kBAACG,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAAEC,SAAU,MAA5C,uBAGA,wBAAIC,UAAU,YACV,wBAAIA,UAAU,iBACV,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEJ,wBAAID,UAAU,iBACV,kBAAC,IAAD,CAAMC,GAAG,UAAT,UAEJ,wBAAID,UAAU,iBACV,kBAAC,IAAD,CAAMC,GAAG,UAAT,UAEJ,wBAAID,UAAU,iBACV,kBAAC,IAAD,CAAMC,GAAG,cAAT,mB,kFC3BHC,E,uKAIb,OACI,6BAEQ,2BAAOC,QAAM,EAACC,IAAKC,IAAUC,MAAM,MAAMC,OAAO,MAAMC,KAAK,YAAYC,UAAQ,EAACC,UAAQ,EAACC,OAAK,EAACC,MAAI,S,GAPlFC,aCIhBC,E,uKAEb,OAEI,yBAAKd,UAAU,gBAEX,kBAACe,EAAA,EAAD,CAAWC,SAAS,MAChB,wBAAIlB,MAAO,CAAEmB,UAAW,WAAxB,qCACA,uBAAGnB,MAAO,CAAEmB,UAAW,WAAvB,0FAEA,kBAACC,EAAA,EAAD,MAEA,kBAAC,EAAD,Y,GAZkBL,aCgCvBM,E,4MAlCXC,MAAQ,CACJC,SAAS,EACTC,QAAS,4B,uDAkBT,OACI,yBAAKtB,UAAU,aACX,kBAACe,EAAA,EAAD,CAAWC,SAAS,MAChB,wBAAIlB,MAAO,CAAEmB,UAAW,WAAaM,KAAKH,MAAME,SAC5C,0FACA,kBAACJ,EAAA,EAAD,MACA,mXACA,ma,GA5BJL,a,kBC0CLW,EA3CD,SAACC,GAUX,OACE,yBAAKzB,UAAU,OACb,kBAACe,EAAA,EAAD,CAAWC,SAAS,MAClB,0BAAMhB,UAAU,aAAa0B,SATnB,SAACC,GACjBA,EAAEC,iBACFC,QAAQC,IAAI,SACZL,EAAMM,UAOE,kBAACC,EAAA,EAAD,CACEC,UAAQ,EAGRC,YAAY,WACZC,KAAK,WACL3B,KAAK,SAEP,kBAACwB,EAAA,EAAD,CACEC,UAAQ,EAGRC,YAAY,WACZC,KAAK,WACL3B,KAAK,aAEP,kBAAC4B,EAAA,EAAD,CACE5B,KAAK,SACLR,UAAU,eACVH,QAAQ,YACRJ,MAAM,WAJR,aCuCG4C,EAzDG,SAACZ,GACf,OACI,6BAEI,uGCsBGa,G,MAZA,WACX,OAEI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3B,IACjC,kBAAC,IAAD,CAAO0B,KAAK,SAASC,UAAWtB,IAChC,kBAAC,IAAD,CAAOqB,KAAK,SAASC,UAAWjB,IAChC,kBAAC,IAAD,CAAOgB,KAAK,aAAaC,UAAWJ,OChBjCK,MAZf,WACE,OAEM,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.39fbbc88.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hp-scroll.50ea0cd5.mp4\";","  \r\nimport React from 'react'\r\nimport { AppBar, Toolbar, IconButton, Typography } from '@material-ui/core'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport { Link } from 'react-router-dom'\r\nimport '../App.css'\r\n\r\nconst TopNavBar = () => {\r\n    return (\r\n        \r\n        \r\n        <AppBar position=\"relative\"color=\"secondary\">\r\n            <Toolbar>\r\n                <IconButton color=\"default\">\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" style={{ flexGrow: \"1\" }}>\r\n                    Enviromedica FBA_PM\r\n                </Typography>\r\n                <ul className=\"nav-list\">\r\n                    <li className=\"nav-list-item\">\r\n                        <Link to=\"/\">Home</Link>\r\n                    </li>\r\n                    <li className=\"nav-list-item\">\r\n                        <Link to=\"/about\">About</Link>\r\n                    </li>\r\n                    <li className=\"nav-list-item\">\r\n                        <Link to=\"/login\">Login</Link>\r\n                    </li>\r\n                    <li className=\"nav-list-item\">\r\n                        <Link to=\"/dashboard\">Dashboard</Link>\r\n                    </li>\r\n                </ul>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default TopNavBar;","import React, { Component } from 'react'\r\nimport hpscroll from \"./hp-scroll.mp4\"\r\n\r\nexport default class HPVideo extends Component {\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div>\r\n                    {/* <video name=\"media\" width=\"320\" height=\"240\"> <source src={hpscroll} type=\"video/mp4\" /> </video> */}\r\n                    <video source src={hpscroll} width=\"720\" height=\"340\" type=\"video/mp4\" controls autoPlay muted loop></video>\r\n                    {/* <video src=\"../../public/videos/hp-scroll.mp4\" width=\"320\" height=\"240\" type=\"video/mp4\" controls></video> */}\r\n                    {/* <embed src=\"../public/videos/hp-scroll.mp4\" autostart=\"false\" height=\"400\" width=\"744\" /> */}\r\n                    {/* <a href=\"../public/videos/hp-scroll.mp4\" title=\"Download movie\">film name</a></video> */}\r\n                    {/* <video width=\"320\" height=\"240\" controls src=\"homepage-scroll\" type=\"video/mp4\"> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// autoplay muted loop \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { Container, Divider, Switch } from '@material-ui/core'\r\nimport HPVideo from \"./HPVideo.js\"\r\n\r\n// This is the Homepage of my App\r\n// This page shouldnt have state\r\n\r\nexport default class Homepage extends Component {\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"App-Homepage\">\r\n\r\n                <Container maxWidth=\"sm\">\r\n                    <h1 style={{ textAlign: 'center' }}>Justins FBA Planning Shipment App</h1>\r\n                    <p style={{ textAlign: 'center' }}>Are you a seller tired of endlessly scrolling in excel to manage Amazon FBA Inventory?</p>\r\n\r\n                    <Divider />\r\n\r\n                    <HPVideo />\r\n\r\n\r\n\r\n                </Container>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","\r\nimport React, { Component } from 'react'\r\nimport { Container, Divider, Switch } from '@material-ui/core'\r\n\r\nclass About extends Component {\r\n    state = {\r\n        checked: true,\r\n        heading: 'About planningMaster.com'\r\n    }\r\n\r\n    // toggleSwitch = () => {\r\n    //     const newVal = !this.state.checked\r\n    //     if (newVal) {\r\n    //         return this.setState({\r\n    //             heading: 'About SB.com',\r\n    //             checked: newVal\r\n    //         })\r\n    //     }\r\n    //     return this.setState({\r\n    //         heading: 'About SB.com',\r\n    //         checked: newVal\r\n    //     })\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-gray\">\r\n                <Container maxWidth=\"sm\">\r\n                    <h1 style={{ textAlign: 'center' }}>{this.state.heading}</h1>\r\n                        <p>Im Justin, thank you for checking out my planning software.</p>\r\n                        <Divider />\r\n                        <p>My final project goal is to create a dashboard of Amazon FBA inventory items, I am hoping to use real data from a active selling account, but will use a demo account dataset if I am unable. For each submitted inventory item, the application will display the current inventory and the forecasted inventory projections for the future 90 days.</p>\r\n                        <p>Welcome to Justins Capstone Server V2  -  My final project goal is to create a dashboard of Amazon FBA inventory items, I am hoping to use real data from a active selling account, but will use a demo account dataset if I am unable. For each submitted inventory item, the application will display the current inventory and the forecasted inventory projections for the future 90 days.</p>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About\r\n","import React from 'react'\r\nimport { TextField,Button,Container } from '@material-ui/core'\r\n\r\nconst Login = (props) => {\r\n\r\n  // still need to declare username and pass \r\n\r\n  const _onSubmit = (e) => {\r\n    e.preventdefault();\r\n    console.log('booom')\r\n    props.login()\r\n  }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Container maxWidth=\"sm\">\r\n          <form className=\"login-form\" onSubmit={_onSubmit}>\r\n            <TextField\r\n              required\r\n              // onChange={props.handleTextChange}\r\n              // value={user.username}\r\n              placeholder='username'\r\n              name=\"username\"\r\n              type=\"text\" \r\n            />\r\n            <TextField\r\n              required\r\n              // onChange={props.handleTextChange}\r\n              // value={user.password}\r\n              placeholder='password'\r\n              name=\"password\"\r\n              type=\"password\" \r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"login-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >Login</Button>\r\n          </form>\r\n        </Container>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Login;","import React from 'react'\r\n\r\n\r\n// import {\r\n//     Container,\r\n//     Table,\r\n//     TableBody,\r\n//     TableCell,\r\n//     TableHead,\r\n//     TableRow\r\n// } from '@material-ui/core'\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\n// import { addSKU } from '../redux/actions'\r\n\r\nconst Dashboard = (props) => {\r\n    return (\r\n        <div>\r\n\r\n            <p>Here is the dashboard, map through skus json file and display Products</p>\r\n            {/* <AddSKU /> */}\r\n\r\n            {/* <Container maxWidth=\"lg\" className=\"sku-dashboard-container\">\r\n\r\n                <h4>Welcome, Dashboard User Dan</h4>\r\n                <div className=\"flex-container\">\r\n\r\n                </div>\r\n\r\n\r\n                <Table>\r\n\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Merchant SKU</TableCell>\r\n                            <TableCell>Display Name</TableCell>\r\n                            <TableCell>Quantity</TableCell>\r\n                            <TableCell>Delete</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n\r\n                    <TableBody>\r\n                        {props.products.map((product, index) => (\r\n                            <TableRow key={product.sku}>\r\n                                <TableCell component=\"th\" scope=\"row\">{product.sku}</TableCell>\r\n                                <TableCell>{product[\"name\"]}</TableCell>\r\n                                <TableCell>{product[\"qty\"]}</TableCell>\r\n                                <TableCell>\r\n                                    <DeleteIcon\r\n                                        // add onClick method here\r\n                                        onClick={() => props.deleteSKU(index)}\r\n                                        className=\"icon text-red\" \r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n\r\n\r\n            </Container> */}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Dashboard\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router'\r\nimport Homepage from './components/Homepage'\r\nimport About from './components/About'\r\nimport Login from './components/Login'\r\nimport Dashboard from './components/Dashboard'\r\n\r\nimport cookie from 'cookie'\r\n\r\n// // Write checkAuth function here\r\n// // Check the cookies for a cookie called \"loggedIn\"\r\nconst checkAuth = () => {\r\n    const cookies = cookie.parse(document.cookie)\r\n    console.log('cookies:', cookies)\r\n    return cookies[\"loggedIn\"] ? true : false\r\n}\r\n\r\n// Write ProtectedRoute function here\r\nconst ProtectedRoute = ({component: Component, ...rest}) => {\r\n    return (\r\n        <Route\r\n        {...rest}\r\n        render={(props) => checkAuth()\r\n            ? <Component {...props} />\r\n            : <Redirect to=\"/login\" />}\r\n        />\r\n    )\r\n}\r\n\r\nconst Router = () => {\r\n    return (\r\n        \r\n        <Switch>\r\n            <Route exact path=\"/\" component={Homepage} />\r\n            <Route path=\"/about\" component={About} />\r\n            <Route path=\"/login\" component={Login} />\r\n            <Route path=\"/dashboard\" component={Dashboard} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Router;","import React from 'react';\r\nimport TopNavBar from './components/NavBar'\r\nimport './App.css'\r\nimport Router from './Router'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n// import { Provider } from 'react-redux'\r\n// import store from './redux/store'\r\n\r\nfunction App() {\r\n  return (\r\n      // <Provider store={store}>\r\n        <BrowserRouter>\r\n            <TopNavBar />\r\n            <Router />\r\n        </BrowserRouter>\r\n      // </Provider>\r\n    );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}